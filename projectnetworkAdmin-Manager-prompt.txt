To recreate this project and continue adding features systematically, you should use the following comprehensive prompt. It encapsulates all the design, functionality, and error-handling aspects we've implemented so far.

-----

**Systematic Prompt for Python PyQt6 Network Utility GUI (Current Version Blueprint)**

-----

**Overall Program Goal:**
Create a standalone Python GUI application using PyQt6 that acts as a network diagnostics tool. It should allow a user to input an IP address or hostname for single operations (ping, tracert, pathping, nmap) and also to select a CSV file for batch pinging of multiple hosts. All network operation results should be displayed within the GUI, and the GUI should remain responsive during these operations.

**Part A: GUI Design Specifications**

1.  **GUI Framework:** PyQt6
2.  **Main Window:**
      * **Title:** "Network Reachability Tool (PyQt6)"
      * **Initial Size:** `850x600` pixels (or adaptable to fit contents).
      * **Resizable:** The window must be resizable.
3.  **Layout:**
      * Use a `QVBoxLayout` as the main layout.
      * Within the main layout, create a `QHBoxLayout` for the input field and command buttons.
4.  **Input Section:**
      * **Label:** "Enter IP Address or Hostname:" (a `QLabel`).
      * **Entry Field:** A `QLineEdit` for user input of a single IP or hostname.
          * **Placeholder Text:** "e.g., https://www.google.com/search?q=google.com or 8.8.8.8"
          * **Action:** Pressing the `Enter` key in this field should trigger the "Ping & Tracert" operation.
5.  **Command Buttons (QPushButtons):**
      * **"Ping & Tracert" Button:**
          * **Text:** "Ping & Tracert"
          * **Action:** Triggers a function to perform a `ping` and then a `tracert` (if ping is successful) on the entered host.
      * **"Pathping" Button:**
          * **Text:** "Pathping"
          * **Action:** Triggers a function to perform a `pathping` (Windows-only) on the entered host.
      * **"Nmap" Button:**
          * **Text:** "Nmap"
          * **Action:** Triggers a function to perform a simple `nmap` scan (e.g., `nmap -F -T4`) on the entered host.
      * **"Check Computers (CSV Ping)" Button:**
          * **Text:** "Check Computers (CSV Ping)"
          * **Action:** Triggers a function that first opens a file dialog for the user to select a CSV file. It then reads IP addresses/hostnames from the *first column* of the selected CSV file and performs a sequential `ping` operation for each host.
6.  **Output Display - Status Label (QLabel):**
      * **Placement:** Below the input/buttons section.
      * **Initial Text:** "Status: N/A"
      * **Dynamic Text/Color:**
          * **"Ping & Tracert":** "Status: Alive" (Green) if successful, "Status: Unable to contact" (Red) if unsuccessful.
          * **"Pathping":** "Status: Pathping Complete" (Green) or "Status: Pathping Failed" (Red) and "Status: Pathpinging..." (Blue) during execution.
          * **"Nmap":** "Status: Nmap Complete" (Green) or "Status: Nmap Failed" (Red) and "Status: Nmap Scanning..." (Blue) during execution.
          * **"Check Computers (CSV Ping)":** "Status: Pinging X hosts from CSV..." (Blue), "Status: CSV Ping Complete" (Green), or "Status: No hosts found in CSV." / "Status: CSV Read Error" (Red).
          * Other error messages should also be displayed here in red.
7.  **Output Display - Results Text Area (QTextEdit):**
      * **Widget Type:** A `QTextEdit` widget.
      * **Placement:** Below the Status Label, occupying the remaining vertical space.
      * **Read-Only:** Must be read-only to the user.
      * **Placeholder Text:** "Network operation results will appear here."
      * **Scrolling:** Automatically handles scrolling for long outputs.
      * **Content Display:**
          * For single-host operations (Ping & Tracert, Pathping, Nmap), clear previous content and display the full command output.
          * For "Check Computers (CSV Ping)", continuously *append* the results of each individual ping operation, along with separators (e.g., "--- Pinging host ---").

**Part B: Core Functionality Specifications**

1.  **Threading Model:**
      * Use `QThread` and a `QObject`-based `Worker` class to perform all network operations in a separate thread.
      * Use `pyqtSignal`s (`ping_status_signal`, `result_update_signal`, `finished_signal`) to communicate results and status back to the main GUI thread safely.
      * The GUI must remain responsive during all network operations.
      * Buttons and the input field should be disabled during an operation and re-enabled upon completion.
2.  **Network Operations (`Worker` Class Methods):**
      * **`_ping_host(host)`:**
          * Executes system `ping` command.
          * **Windows:** `ping -n 1 {host}`
          * **macOS/Linux:** `ping -c 1 {host}`
          * Returns `(True, output)` for success, `(False, error_output)` for failure.
          * Includes a timeout (e.g., 5 seconds).
      * **`_tracert_host(host)`:**
          * Executes system `tracert` (Windows) or `traceroute` (macOS/Linux) command.
          * Includes a timeout (e.g., 30 seconds).
      * **`_pathping_host(host)`:**
          * Executes system `pathping` command (Windows-only).
          * Includes a timeout (e.g., 90 seconds, as pathping can be slow).
          * For non-Windows systems, return an appropriate "not available" message.
      * **`_nmap_host(host)`:**
          * Executes system `nmap` command.
          * Use a basic scan (e.g., `nmap -F -T4 {host}`).
          * Includes a timeout (e.g., 120 seconds).
      * **`run()` method in Worker:**
          * Determines which network operation to perform based on an `operation` parameter passed during initialization.
          * Emits `result_update_signal` to append initial "Starting operation..." message.
          * Emits `ping_status_signal` with overall success/failure.
          * Emits `result_update_signal` with the full output of the command.
          * Emits `finished_signal` upon completion.
3.  **CSV Ping Logic (`run` method for `operation="csv_ping"`):**
      * Iterate through the `hosts_list` provided to the worker.
      * For each host, perform a `_ping_host` call.
      * Append the result of each ping (e.g., "Host: Alive/Unable to contact" and its raw output) to the main `QTextEdit` via `result_update_signal`.

**Part C: Error Handling & User Experience**

1.  **Input Validation:**
      * Check for empty IP address/hostname input before starting any operation. Display an error message in the status label and clear results.
2.  **Subprocess Execution Errors:**
      * Use `try-except` blocks around `subprocess.run` for `FileNotFoundError` (command not found), `subprocess.TimeoutExpired`, and general `Exception`s.
      * Display user-friendly error messages in the output text area and update the status label (red text for errors).
3.  **CSV File Handling:**
      * Use `QFileDialog` to allow users to select a CSV file.
      * Handle cases where the user cancels the file selection.
      * Include `try-except` for file reading errors.
      * Warn the user (e.g., with `QMessageBox.warning`) if the CSV file is empty or no valid hosts are found in the first column.
4.  **Clear Output:** Ensure the `QTextEdit` is cleared at the start of each new operation (except for CSV ping where content is appended).
5.  **Button State Management:** All buttons and the input field are disabled when a network operation starts and re-enabled when it finishes.
6.  **Status Label Updates:** Provide clear, color-coded status messages (blue for in-progress, green for success, red for errors/failure).

**Part D: Code Structure & Comments**

1.  **Class-Based Structure:** The application should be encapsulated within a `NetworkReachabilityApp` class. Network operations should be within a separate `Worker` class.
2.  **Modular Functions:** Organize logic into well-defined methods within both classes (e.g., `init_ui`, `_ping_host`, `start_network_checks`, `update_ping_status`, etc.).
3.  **Comprehensive Comments:** Include comments explaining the purpose of classes, methods, complex logic, and important UI elements.
4.  **Imports:** Ensure all necessary PyQt6, standard library (`sys`, `subprocess`, `     `platform` ,  `csv\`), and threading modules are imported.
5.  **`if __name__ == "__main__":` block:** Standard entry point for a Python GUI application.

-----